/*
 * Abstract (추상)
 *  - 사전적 의미: 실체 간에 공통되는 특성을 추출한 것
 *    ex) 고양이, 강아지, 사자 → 공통 특성 → 동물
 *  - 추상 클래스는 실제 클래스가 공통적으로 가져야할
 *    필드와 메서드들을 정의해 놓은 추상적인 클래스
 *  1. 추상 클래스는 단독 사용 불가!
 *  2. 추상 클래스 (부모) → 자식 클래스 상속을 통해서만 사용 가능
 *     자식 클래스를 통해서만 사용 가능!
 *  3. 자식 클래스가 추상.멤버변수, 멤버함수를
 *     그대로 사용할 수 없음!
 *  4. 반드시 추상.멤버함수를 오버라이딩해서만 사용 가능!, 메소드를 모두 오버라이딩 해야 함
 *  ※ 추상 클래스는 실체 클래스가 공통적으로 가져야할 필드와 
 *     메소드들을 정의해 놓은 클래스로, 실체 클래스의 멤버를 통일화하는데 목적이 있음
 *     → 강제성: 추상메서드는 자식이 반드시 오버라이딩해서
 *             사용해야함, 하지않으면 오류 발생
 *  ※ 추상클래스는 미완성 클래스, new 객체 생성 X
 *  
 *  ex) 동물 추상클래스
 *        - 추상함수 동물 울음소리()
 *        - 추상함수 걷기()
 *        - 추상함수 뛰기()
 *      
 *      public Class 고양이 extends 동물 {
 *      	
 *      }
 * ■ 추상 문법
 *  1. class 와 method 앞에 abstract 지정어 사용 가능
 *  2. 추상메서드는 추상클래스와 인터페이스 내에서만 사용 가능
 *  3. 추상클래스 안에는 일반변수, 추상메서드, 일반메서드, 생성자
 *     → 클래스라서 다중 상속이 안됨, 일반메서드도 들어가서 너무 잡탕 느낌이 남. 그래서 인터페이스가 생김
 *  4. 추상메서드는 abstract 키워드를 붙이고 {실행문} 없음
 *  
 * ■ 추상클래스의 문제점과 인터페이스
 *  1. 클래스기 때문에 다중상속 불가
 *  2. 추상클래스 내에 일반변수, 일반메서드 등이 올 수 있음
 *     → 관리 개념의 추상인지 일반인지 추상클래스의 정의가 모호해짐
 *  
 *  그래서 추상메서드만 존재하고, 다중구현이 가능한
 *  → 인터페이스
 */

package ch07_object_deep;

/*
 * 추상 클래스
 *  - 추상 메서드를 하나 이상 포함하면 추상 클래스
 *  - 추상 클래스는 객체 생성 불가, 반드시 상속으로만 사용
 *  - 객체 생성불가 외에는 일반 클래스와 동일
 *  - 생성자가 반드시 존재해야함 → 자식 객체 생성시 부모 객체 생성
 *   
 */
public abstract class Abstract03 {  // 추상메서드는 추상클래스에만 올 수 있음
	/*
	 * 추상 메서드
	 *  - 자식이 반드시 추상 메서드를 재정의해서 사용, 오버라이딩
	 *  - {실행문} 없음
	 *  - abstract 키워드를 인터페이스 내에서는 생략 가능, 인터페이스는 일반 메서드가 들어가지 못하니까
	 *  - 접근제한자 private 사용 불가
	 */ 
	//  - 자식이 반드시 추상 메소드를 재정의해서 사용
	public abstract void cryAnimal();

}
