/*
 * 상속
 *  - 현실 상속은 부모가 자식에게 재산을 물려주는 행위
 *  - 객체지향 언어에서는 부모 클래스의 멤버(field, method)를 자식 클래스에게 물려줄 수 있음
 *    부모 클래스(상위 클래스), 자식 클래스(하위 클래스)
 *  → 부모 클래스에 존재하는 필드와 메서드를 
 *    자식 클래스가 사용할 수 있도록 하는 기법이 상속
 *  - 부모 클래스에 존재하는 메서드가 수정하고 싶은 경우
 *    → 메소드 오버라이딩  
 *  - 상속은 이미 잘 개발된 클래스를 '재사용'해서 새로운
 *    클래스를 만들기 때문에 코드의 중복을 줄여줌
 *    → 효율적이고 개발 시간을 절약
 *  - 상속을 한다고해서 부모 클래스의 모든 멤버를 물려받는 것은 아님
 *    → 부모 클래스에서 private 제한하면 상속대상에서 제외
 *    → 생성자 함수는 상속 불가
 *    → default면 부모와 자식이 다른 클래스에 존재하면 상속 불가
 *  - 코드 관리 및 수정 용이
 *    → A(부모), 자식(B, C, D)
 *    → B, C, D에서 부모 클래스의 calcSum()함수 상속 사용 (가정)
 *    → 부모 클래스의 calcSum()을 수정하면 B, C, D도 수정된 효과 볼 수 있음
 *  - 상속관계에서는 부모객체를 먼저 생성하고 자식객체를 생성
 *    → 자식 생성자() 최상단에 super(); 작성
 *      부모 클래스 생성자를 호출 → 부모 객체 생성
 *  - 상속을 받더라도 객체 생성 후 사용!
 *  - JAVA는 기본적으로 다중상속 불가! 여러 부모 X → 다중 구현체
 *  
 * ■ 상속을 사용하는 이유
 *  1. 개발의 편리성, 처음부터 개발할 필요 없이
 *     만들어져 있는 거 가져와서 수정 (효율적)
 *  2. 다양한 객체(타입)을 상속을 통해서
 *     하나의 타입으로 묶을 수 있음 (다형성)
 * */

package ch07_object_deep;

public class inherit01 {
	
}
